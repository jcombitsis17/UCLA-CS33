A. (float) x == (float) dx
Always yields 1. Truncating occurs when casting on both sides, but it happens
in the same way, so the equality will still hold.

B. dx - dy == (double) (x-y)
Can yield 0. Consider x=INT_MIN and y=1. (x-y) gives INT_MAX due to overflow,
but dx-dy just evaluates to the negative value that is 1 less than INT_MIN.
-fwrapv is a necessary assumption here because without the flag, (x-y) gives 
an undefined result.

C. (dx + dy) + dz == dx + (dy + dz)
Always yields 1. The values of dx, dy, and dz will all be within the range of
[INT_MIN, INT_MAX], and adding them together will not cause overflow, so the 
sums' exact (and correct) mathematical result can be represented by a double.

D. (dx * dy) * dz == dx * (dy * dz)
Can yield 0. Consider dx=INT_MAX, dy=INT_MAX-1, dz=INT_MAX-2. The expressions
will not be able to be represented with exact precision due to truncation,
since the operands are so large.

E. dx / dx == dz / dz
Can yield 0. Consider dx=0 and dz=1. NaN != 1, so the equality does not hold.
