Downlaod and extract the openmplab material.

tar -xzf openmplab.tgz

Compile normally to observe initial speed for the program.

make seq
./seq

Output:
FUNC TIME : 0.805380
TOTAL TIME : 2.886088

Compile with gprof, to find out which functions take the longest (these will be
the best functions to optimize in order to maximize speedup).

make clean
make seq GPROF=1
gprof seq

Output:
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 72.19      0.62     0.62       15    41.39    43.04  func1
 15.14      0.75     0.13  5177344     0.00     0.00  rand2
  3.49      0.78     0.03   491520     0.00     0.00  findIndexBin
  3.49      0.81     0.03        1    30.04   135.50  addSeed
  2.33      0.83     0.02        2    10.01    10.01  init
  1.16      0.84     0.01        1    10.01    10.01  imdilateDisk
  1.16      0.85     0.01                             filter
  1.16      0.86     0.01                             sequence
  0.00      0.86     0.00   983042     0.00     0.00  round
  0.00      0.86     0.00       16     0.00     0.00  dilateMatrix
  0.00      0.86     0.00       15     0.00     0.00  func2
  0.00      0.86     0.00       15     0.00     0.00  func3
  0.00      0.86     0.00       15     0.00     0.00  func4
  0.00      0.86     0.00       15     0.00     2.00  func5
  0.00      0.86     0.00       15     0.00     0.00  rand1
  0.00      0.86     0.00        2     0.00     0.00  get_time
  0.00      0.86     0.00        1     0.00     0.00  elapsed_time
  0.00      0.86     0.00        1     0.00     0.00  fillMatrix
  0.00      0.86     0.00        1     0.00     0.00  func0
  0.00      0.86     0.00        1     0.00     0.00  getNeighbors

Based on this output, func1 by far takes the most time (72.19%). So we should 
optimize this function using parallelization to maximize the program's speed.

In the OpenMP spec, I find that there is a useful construct for parallelism:
#pragma omp parallel for [clause].
After using OpenMP to parallelize func1, we test the speed again.

make clean
make omp
./omp

Output:
FUNC TIME : 0.277853
TOTAL TIME : 2.381150

Now we test omp with gprof to see if func1's time % changed.

make clean
make omp GPROF=1
gprof omp

Output:
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 73.53      0.47     0.47        6    78.43    83.69  filter
 10.95      0.54     0.07  4283970     0.00     0.00  rand2
  4.69      0.57     0.03        1    30.04    98.66  addSeed
  3.13      0.59     0.02   491520     0.00     0.00  findIndexBin
  3.13      0.61     0.02        2    10.01    10.01  init
  1.56      0.62     0.01       15     0.67     2.00  func5
  1.56      0.63     0.01        1    10.01    10.01  imdilateDisk
  1.56      0.64     0.01                             sequence
  0.00      0.64     0.00   132153     0.00     0.00  round
  0.00      0.64     0.00       16     0.00     0.00  dilateMatrix
  0.00      0.64     0.00       15     0.00     0.00  func1
  0.00      0.64     0.00       15     0.00     0.00  func2
  0.00      0.64     0.00       15     0.00     0.00  func3
  0.00      0.64     0.00       15     0.00     0.00  func4
  0.00      0.64     0.00       15     0.00     0.00  rand1
  0.00      0.64     0.00        2     0.00     0.00  get_time
  0.00      0.64     0.00        1     0.00     0.00  elapsed_time
  0.00      0.64     0.00        1     0.00     0.00  fillMatrix
  0.00      0.64     0.00        1     0.00     0.00  func0
  0.00      0.64     0.00        1     0.00     0.00  getNeighbors

As seen here, func1 is now basically irrelevant as far as taking up time in the
program.

Now to increase speedup, we can parallelize all 6 functions in func.c, and 
check speedup again afterwards.
NOTE: This speed was obtained on lnxsrv05, since (as noted on Piazza) some 
of the Linux servers cause the program to experience minimal speedup, or even
slowdown (probably due to how many people were using the server(s) at the same
time). All other speeds were on lnxsrv09 (the one I normally use for labs and 
projects).

make clean
make omp
./omp

Output:
FUNC TIME : 0.083458
TOTAL TIME : 2.448850

Now we check for memory leaks, and find that several appear for omp.

make clean
make omp MTRACE=1
./omp
make checkmem

Output:
Memory not freed:
-----------------
           Address     Size     Caller
addr2line: 'filter': No such file
0x0000000000a5d0a0   0x2040  at 
0x0000000000a5f0f0     0xc0  at 
addr2line: 'filter': No such file
0x0000000000a5f1c0    0x108  at 
addr2line: 'filter': No such file
0x0000000000a5f2d0    0x240  at 
0x0000000000a5f520    0x240  at 
0x0000000000a5f770    0x240  at 
0x0000000000a5f9c0    0x240  at 
0x0000000000a5fc10    0x240  at 
0x0000000000a5fe60    0x240  at 
0x0000000000a600b0    0x240  at 
0x0000000000a60300    0x240  at 
0x0000000000a60550    0x240  at 
0x0000000000a607a0    0x240  at 
0x0000000000a609f0    0x240  at 
0x0000000000a60c40    0x240  at 
0x0000000000a60e90    0x240  at 
0x0000000000a610e0    0x240  at 
0x0000000000a61330    0x240  at 
0x0000000000a61580    0x240  at 
0x0000000000a617d0    0x240  at 
0x0000000000a61a20    0x240  at 
0x0000000000a61c70    0x240  at 
0x0000000000a61ec0    0x240  at 
0x0000000000a62110    0x240  at 
0x0000000000a62360    0x240  at 
0x0000000000a625b0    0x240  at 
0x0000000000a62800    0x240  at 
0x0000000000a62a50    0x240  at 
0x0000000000a62ca0    0x240  at 
0x0000000000a62ef0    0x240  at 
0x0000000000a63140    0x240  at 
0x0000000000a63390    0x240  at 
0x0000000000a635e0    0x240  at 
0x0000000000a63830    0x240  at 

However, as specified on Piazza by the TA's, if memory leaks occur when
compiling using OpenMP, they can be ignored. So to confirm that there are no
memory leaks that will hurt the lab grade, I check if there are memory leaks for
compiling with seq (no OpenMP).

make clean
make seq MTRACE=1
./seq
make checkmem

Output:
No memory leaks.

To check that we get the same output, we run
diff -q output.txt correct.txt
Since nothing is output, the 2 files are the exact same, so the new program 
using OpenMP had the correct output.

So the final speedup for FUNC TIME was 0.805380 vs 0.083458, which gives a
result of about 9.65x speedup!
