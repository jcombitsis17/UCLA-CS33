A.
e1.p: 	 0 (1st arg)
e1.y: 	 8 (e1.p is a long = 8 bytes wide)
e2.x: 	 0 (1st arg)
e2.next: 8 (e2.x is a long = 8 bytes wide)

B. 0+8+0+8 = 16 total bytes

C.
void proc (union ele *up) {
  up->e2.x = *( up->e2.next->e1.p ) - ( up->e2.next->e1.y );
}

Line # of Assembly Code | Explanation
- - - - - - - - - - - - - - - - - - -
2 | Accesses *up at offset 8 (could be e1.y or e2.next) --> %rax
3 | Accesses %rax at offset 0 --> %rdx; e1.y has no offset 0, so now we know
  | that Line 2 refers to up->e2.next
4 | Accesses %rdx at offset 0 (could be e1.y or e2.next) --> %rdx
5 | Subq using (%rdx - 8(%rax)) --> %rdx. Now we know Line 4 refers to e1.y
  | because %rdx must be type long. Similarly, we can infer that 8(%rax)
  | refers to *(e1.p)... hence the given blank *(___).
6 | Moves the result %rdx into (%rdi). Up at offset 0 must be type long, so
  | (%rdi) refers to up->e2.x.
